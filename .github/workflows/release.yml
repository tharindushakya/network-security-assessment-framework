name: Release

on:
  push:
    branches: [ main, release/* ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # Generate version based on date and commit
            VERSION="$(date +'%Y.%m.%d').$(git rev-parse --short HEAD)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\.[a-zA-Z0-9]+)?$ ]]; then
            echo "Warning: Version '$VERSION' doesn't follow semantic versioning"
          fi

      - name: Update version in setup.py
        run: |
          echo "Updating version to ${{ steps.get_version.outputs.version }}"
          python scripts/update_version.py setup.py "${{ steps.get_version.outputs.version }}"
          echo "Version updated successfully"

      - name: Verify version update
        run: |
          echo "Verifying version in setup.py:"
          grep -n "version=" setup.py || echo "Version field not found"
          python -c "import setup; print(f'Setup version: {getattr(setup, \"version\", \"Not found\")}')" 2>/dev/null || echo "Could not import setup"

      - name: Run tests
        run: |
          pip install -r requirements.txt
          python -m pytest tests/ -v || echo "No tests found or tests failed"

      - name: Run security scan
        run: |
          pip install bandit
          python scripts/security_scan.py || echo "Security scan completed with warnings"

      - name: Build package
        run: |
          echo "Building distribution packages..."
          python -m build
          echo "Build completed"

      - name: Verify build artifacts
        run: |
          echo "Build artifacts:"
          ls -la dist/
          echo "Checking package contents:"
          python -m tarfile -l dist/*.tar.gz | head -20 || echo "Could not list tar contents"

      - name: Create Git tag
        if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          echo "Creating tag: $TAG"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: NSAF v${{ steps.get_version.outputs.version }}
          body: |
            ## Network Security Assessment Framework v${{ steps.get_version.outputs.version }}
            
            ### ðŸ”’ Security Features
            - Comprehensive network vulnerability scanning
            - Automated security assessment reporting
            - Multi-format output support (JSON, HTML, CSV)
            
            ### ðŸ“¦ Installation
            ```bash
            pip install nsaf
            ```
            
            ### ðŸš€ Quick Start
            ```bash
            nsaf scan --target 192.168.1.0/24 --output report.html
            ```
            
            ### ðŸ“‹ What's Included
            - Network discovery and port scanning
            - Vulnerability assessment engine
            - Customizable report generation
            - Command-line interface
            
            ### ðŸ”— Resources
            - [Documentation](https://github.com/${{ github.repository }}/wiki)
            - [Quick Start Guide](https://github.com/${{ github.repository }}/blob/main/QUICK_START_GUIDE.md)
            - [Security Policy](https://github.com/${{ github.repository }}/blob/main/SECURITY.md)
            
            ---
            **Full Changelog**: https://github.com/${{ github.repository }}/commits/main
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/nsaf-${{ steps.get_version.outputs.version }}.tar.gz
          asset_name: nsaf-${{ steps.get_version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Wheel Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/nsaf-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_name: nsaf-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip

      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Publishing to PyPI..."
          if [ -n "$TWINE_PASSWORD" ]; then
            python -m twine upload dist/* --verbose
          else
            echo "PyPI token not configured, skipping upload"
          fi

      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts**: $(ls dist/ | wc -l) files built" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
